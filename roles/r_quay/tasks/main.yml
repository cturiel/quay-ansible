- name: Determine Server Roles
  tags:
  - always
  set_fact:
    quay_servers: "{{ hostvars.values() | selectattr('is_quay', 'defined') | selectattr('is_quay') | map(attribute='inventory_hostname') | list }}"
    clair_servers: "{{ hostvars.values() | selectattr('is_clair', 'defined') | selectattr('is_clair') | map(attribute='inventory_hostname') | list }}"


# Quay Variable Checks
#
#
- name: Check that Quay variables have been set
  when:
  - quay_servers | length > 0
  - "item.key.startswith('quay_')"
  assert:
    that: "{{ item.key }} != 'CHANGEME'"
    quiet: yes
  with_dict: "{{ lookup('file', 'defaults/main.yml') | from_yaml }}"
  loop_control:
    label: "{{ item.key }}"
  ignore_errors: true


# Clair Variable Checks
#
#
- name: Check that Clair variables have been set
  when:
  - clair_servers | length > 0
  - "item.key.startswith('clair_')"
  assert:
    that: "{{ item.key }} != 'CHANGEME'"
    quiet: yes
  with_dict: "{{ lookup('file', 'defaults/main.yml') | from_yaml }}"
  loop_control:
    label: "{{ item.key }}"

# Setup databases
#
#
- name: Database Tasks
  import_tasks: database.yml


# Set Quay SSL Variables
#
#
- tags:
  - always
  block:
  - name: Set Quay DB sslmode default
    when: not postgres_ssl_mode|bool
    set_fact:
      quay_db_sslmode: "{{ 'prefer' }}"


  - name: Set Quay DB connect options without CA
    when: not postgres_ssl_mode|bool
    set_fact:
      quay_db_connect_options:
        sslmode: "{{ quay_db_sslmode }}"
        autorollback: true
        threadlocals: true


  - name: Set Quay DB sslmode default
    when: postgres_ssl_mode|bool
    set_fact:
      quay_db_sslmode: "{{ 'verify-full' }}"

  - name: Set Quay DB connect options with CA
    when: postgres_ssl_mode|bool
    set_fact:
      quay_db_connect_options:
        sslmode: "{{ quay_db_sslmode }}"
        sslrootcert: "conf/stack/database.pem"
        autorollback: true
        threadlocals: true

# Set Clair SSL Variables
#
#
- tags:
    - always
  block:
  - name: Set Clair DB sslmode default
    when: not postgres_ssl_mode|bool
    set_fact:
      clair_db_sslmode: "{{ 'disable' }}"

  - name: Set Clair DB sslmode default
    when: postgres_ssl_mode|bool
    set_fact:
      clair_db_sslmode: "{{ 'verify-full' }}"


  - name: Set Clair DB connect options without CA
    when: not postgres_ssl_mode|bool
    set_fact:
      clair_db_connect_options: "sslmode={{ clair_db_sslmode }}"

  - name: Set Clair DB connect options with CA
    when: postgres_ssl_mode|bool
    set_fact:
      clair_db_connect_options: "sslmode={{ clair_db_sslmode }},sslrootcert=/clair/config/database.pem"


# Create Quay Directories
#
#
- name: Create Quay Config Directories
  when:
  - is_quay|bool
  - inventory_hostname == quay_setup_client
  tags:
  - folders
  file:
    path: "/tmp/quay-config"
    state: directory
    owner: "{{ quay_runtime_user | default(omit) }}"
    group: "{{ quay_runtime_user | default(omit) }}"
    mode: 0755

- name: Create Quay Directories
  when: is_quay|bool
  tags:
  - folders
  file:
    path: "{{ quay_data_dir }}/{{ item }}"
    state: directory
    owner: "{{ quay_runtime_user | default(omit) }}"
    group: "{{ quay_runtime_user | default(omit) }}"
    mode: 0755
  with_items:
  - ''
  - config
  - config/extra_ca_certs
  - custom
  - storage
  - anchors

# Create Quay Repomirror Directories
#
#
- name: Create Quay Repomirror Directories
  when:
  - is_quay|bool
  - quay_repomirror_feature|bool
  tags:
  - folders
  file:
    path: "{{ quay_repomirror_storage_dir }}/{{ item }}"
    state: directory
    owner: "{{ quay_runtime_user | default(omit) }}"
    group: "{{ quay_runtime_user | default(omit)  }}"
    mode: 0755
  with_items:
  - config
  - config/extra_ca_certs
  - custom
  - storage
  - anchors

# Create Clair Directories
#
#
- name: Create Clair Directories
  when: is_clair|bool
  tags:
  - folders
  - clair
  file:
    path: "{{ clair_data_dir }}/{{ item }}"
    state: directory
    owner: "{{ clair_runtime_user | default(omit)  }}"
    group: "{{ clair_runtime_user | default(omit)  }}"
    mode: 0755
  with_items:
  - ''
  - config
  - config/keys
  - storage
  - anchors

# Setup Quay seLINUX
#
#
- when:
  - is_quay|bool
  - inventory_hostname == quay_setup_client
  tags:
  - folders
  - quay
  - selinux
  block:
  - name: "Set selinux context for container data"
    sefcontext:
      target: "{{ item }}(/.*)?"
      setype: svirt_sandbox_file_t
      state: present
    register: sefcontext_status
    with_items:
    - "/tmp/quay-config"

  - name: "Apply selinux context for container data"
    when: sefcontext_status.changed
    shell: "restorecon -irv {{ item }}"
    with_items:
    - "/tmp/quay-config"
    
- when: is_quay|bool
  tags:
  - folders
  - quay
  - selinux
  block:
  - name: "Set selinux context for container data"
    sefcontext:
      target: "{{ item }}(/.*)?"
      setype: svirt_sandbox_file_t
      state: present
    register: sefcontext_status
    with_items:
    - "{{ quay_data_dir }}"

  - name: "Apply selinux context for container data"
    when: sefcontext_status.changed
    shell: "restorecon -irv {{ item }}"
    with_items:
    - "{{ quay_data_dir }}"

- when:
  - is_quay|bool
  - quay_repomirror_feature|bool
  tags:
  - folders
  - quay
  - selinux
  block:
  - name: "Set selinux context for container data"
    sefcontext:
      target: "{{ item }}(/.*)?"
      setype: svirt_sandbox_file_t
      state: present
    register: sefcontext_status
    with_items:
    - "{{ quay_repomirror_storage_dir }}"

  - name: "Apply selinux context for container data"
    when: sefcontext_status.changed
    shell: "restorecon -irv {{ item }}"
    with_items:
    - "{{ quay_repomirror_storage_dir }}"

# Setup Clair seLINUX
#
#
- when: is_clair|bool
  tags:
  - folders
  - clair
  - selinux
  block:
  - name: "Set selinux context for container data"
    sefcontext:
      target: "{{ item }}(/.*)?"
      setype: svirt_sandbox_file_t
      state: present
    register: sefcontext_status
    with_items:
    - "{{ clair_data_dir }}"

  - name: "Apply selinux context for container data"
    when: sefcontext_status.changed
    shell: "restorecon -irv {{ item }}"
    with_items:
    - "{{ clair_data_dir }}"

  # COPY Quay Config, TLS, CA and Logo Files
  #
  #
- when: is_quay|bool
  tags:
    - quay
  block:
  - name: Copy Quay TLS Cert File
    tags:
      - cert
    copy:
      content: "{{ quay_cert_file }}"
      dest: "{{ quay_data_dir }}/config/ssl.cert"

  - name: Copy Quay TLS Key File
    tags:
      - cert
    copy:
      content: "{{ quay_key_file }}"
      dest: "{{ quay_data_dir }}/config/ssl.key"

  - name: Copy Quay CA Files
    tags:
      - ca
    copy:
      content: "{{ quay_ca_file }}"
      dest: "{{ quay_data_dir }}/anchors/ca.crt"

  - name: Copy Quay DB CA File
    tags:
      - ca
    when: postgres_ssl_mode|bool
    copy:
      content: "{{ quay_db_ca_file }}"
      dest: "{{ quay_data_dir }}/config/database.pem"

  - name: Copy S3 Cert
    tags:
      - cert
    when: quay_s3_cert_name is defined
    copy:
      content: "{{ quay_s3_cert_file }}"
      dest: "{{ quay_data_dir }}/config/extra_ca_certs/{{ quay_s3_cert_name }}"

  - name: Copy LDAP Cert
    tags:
      - cert
    when: quay_ldap_cert_name is defined
    copy:
      content: "{{ quay_ldap_cert_file }}"
      dest: "{{ quay_data_dir }}/config/extra_ca_certs/{{ quay_ldap_cert_name }}"

  - name: Copy Custom Logo File for Quay
    tags:
      - logo
    when: quay_logo_file != ''
    copy:
      src: "{{ quay_logo_file }}"
      dest: "{{ quay_data_dir }}/custom/{{ quay_logo_file | basename }}"

  # Quay Unit Tests
  #
  #
  - when: is_quay|bool
    block:
    - import_tasks: unit-test-quay.yml

  # Import Setup Yaml
  #
  #
  - import_tasks: setup.yml

# GATHER SETUP VARS
#
#
- name: Validate Setup Variables - Clair
  when: is_clair|bool
  assert: 
    that: "{{ item }} | default('') != ''"
    quiet: yes
  with_items:
  - quay_api_scanner_key_id

- name: Validate Setup Variables - Quay
  when: is_quay|bool
  assert:
    that: "{{ item }} | default('') != ''"
    quiet: yes
  with_items:
  - quay_config_merged

- when: is_quay|bool
  block:
  - name: Init Custom Logo Config
    set_fact:
      quay_config_custom_logo: {}

  - name: Update Quay Config with Custom Logo
    when: quay_logo_file != ''
    set_fact:
      quay_config_custom_logo:
        ENTERPRISE_LOGO_URL: "/static/img/logos/custom/{{ quay_logo_file|basename }}"

# COPY Quay Config
#
#
- when: is_quay|bool
  block:
  - name: Write Merged Quay Config
    copy:
      dest: "{{ quay_data_dir }}/config/config.yaml"
      content: "{{ quay_config_merged | combine(quay_config_custom_logo) | to_nice_yaml }}"
      backup: yes

# COPY Quay Repomirror Config, TLS, CA and Logo Files
#
#
- when:
  - is_quay|bool
  - quay_repomirror_feature|bool
  block:
  - name: Write Merged Quay Repomirror Config
    copy:
      dest: "{{ quay_repomirror_storage_dir }}/config/config.yaml"
      content: "{{ quay_config_merged | combine(quay_config_custom_logo) | to_nice_yaml }}"
      backup: yes

  - name: Copy Quay Repomirror TLS Cert File
    tags:
    - cert
    copy:
      content: "{{ quay_cert_file }}"
      dest: "{{ quay_repomirror_storage_dir }}/config/clair.cert"

  - name: Copy Quay Repomirror TLS Key File
    tags:
    - cert
    copy:
      content: "{{ quay_key_file }}"
      dest: "{{ quay_repomirror_storage_dir }}/config/clair.key"


  - name: Copy CA Files for Quay Repomirror
    tags:
    - ca
    copy:
      content: "{{ quay_ca_file }}"
      dest: "{{ quay_data_dir }}/anchors/ca.crt"

  - name: Copy DB CA File for Quay Repomirror
    tags:
    - ca
    when: postgres_ssl_mode|bool
    copy:
      content: "{{ quay_db_ca_file }}"
      dest: "{{ quay_repomirror_storage_dir }}/config/database.pem"

  - name: Copy Custom Logo File for Quay Repomirror
    tags:
    - logo
    when: quay_logo_file != ''
    copy:
      src: "{{ quay_logo_file }}"
      dest: "{{ quay_repomirror_storage_dir }}/custom/{{ quay_logo_file | basename }}"


# Clair Key File and Test
#
#
- when: is_clair|bool
  block:
  - name: Create Clair Scanner Keyfile
    when: "quay_api_scanner_key_data | default('') != ''"
    copy:
      content: "{{ quay_api_scanner_key_data }}"
      dest: "{{ clair_data_dir }}/config/security_scanner.pem"

  - name: Verify Clair Scanner Keyfile Exists
    stat:
      path: "{{ clair_data_dir }}/config/security_scanner.pem"
    register: clair_keyfile
    failed_when: "not clair_keyfile.stat.exists"

  - name: Get Clair Config from Role
    include_vars:
      file: files/clair/config.yaml
      name: clair_role_config

  - name: Write Clair Config
    copy:
      dest: "{{ clair_data_dir }}/config/config.yaml"
      content: "{{ clair_role_config | to_nice_yaml }}"
      backup: yes

  - name: Copy Clair TLS Cert File
    tags:
    - cert
    copy:
      content: "{{ clair_cert_file }}"
      dest: "{{ clair_data_dir }}/config/clair.crt"

  - name: Copy Clair TLS Key File
    tags:
    - cert
    copy:
      content: "{{ clair_key_file }}"
      dest: "{{ clair_data_dir }}/config/clair.key"

  - name: Copy CA Files for Clair
    tags:
      - ca
    copy:
      content: "{{ clair_ca_files }}"
      dest: "{{ clair_data_dir }}/anchors/ca.crt"

  - name: Copy DB CA File for Clair
    tags:
    - ca
    when: postgres_ssl_mode|bool
    copy:
      content: "{{ clair_db_ca_file }}"
      dest: "{{ clair_data_dir }}/anchors/database.pem"

  - name: Copy S3 File for Clair
    tags:
      - ca
    when: quay_s3_cert_name is defined
    copy:
      content: "{{ quay_s3_cert_file }}"
      dest: "{{ clair_data_dir }}/anchors/{{ quay_s3_cert_name }}"

# Clair Unit Tests
#
#
- import_tasks: unit-test-clair.yml

# Start Quay Containers
- import_tasks: container-quay.yml

# Start Clair Containers
- import_tasks: container-clair.yml


