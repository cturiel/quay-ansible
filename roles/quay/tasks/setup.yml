- name: Quay Setup - Determine Hostname
  set_fact:
    quay_setup_server: "{{ hostvars.values() | selectattr('is_quay', 'defined') | selectattr('is_quay') | map(attribute='inventory_hostname') | first }}"
    quay_setup_client: localhost
  failed_when: "quay_setup_server is not defined"
- name: Quay Setup - Generate Config Password
  set_fact:
    quay_setup_password: "{{ lookup('password', '/tmp/quay_setup_password length=20 chars=ascii_letters') }}"

# Start Config container
- import_tasks: container-quayconfig.yml

# Initialize Config Mode
- run_once: yes
  when: "inventory_hostname == ansible_play_hosts_all[0]"
  block:
  - name:  Quay Setup - Wait for Config Container
    wait_for:
      host: "{{ quay_setup_server }}"
      port: 8443
      delay: 10
      timeout: 60
  - name: Quay Setup API - Initialize Config
    delegate_to: "{{ quay_setup_client }}"
    uri:
      method: POST
      url: " https://{{ quay_setup_server }}:8443/api/v1/configapp/initialization"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: raw
      validate_certs: no
    register: quay_config_rest_response
    failed_when: "quay_config_rest_response.status != 200 or quay_config_rest_response.content | trim | lower != 'ok'"
    retries: 10
    delay: 5

# Connect to DB
- run_once: yes
  when: "inventory_hostname == ansible_play_hosts_all[0]"
  delegate_to: "{{ quay_setup_client }}"
  block:
  - name: Quay Setup API - Get Config State
    uri:
      method: GET
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/registrystatus"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
    register: quay_config_rest_response
    failed_when: "quay_config_rest_response.status != 200 or quay_config_rest_response.json.status != 'config-db'"
  - name: Quay Setup API - Validate Database Info
    uri:
      method: POST
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/config/validate/database"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
      body:
        config:
          DB_URI: "postgresql://{{ quay_db_username | urlencode }}:{{ quay_db_password | urlencode }}@{{ quay_db_hostname }}:{{ quay_db_port }}/{{ quay_db_dbname }}"
          DB_CONNECTION_ARGS: "{{ quay_db_connect_options }}"
    register: quay_config_rest_response
    failed_when: "quay_config_rest_response.status != 200 or quay_config_rest_response.json.status != true"
  - name: Quay Setup API - Set Database Info
    uri:
      method: PUT
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/config"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
      body:
        config:
          DB_URI: "postgresql://{{ quay_db_username | urlencode }}:{{ quay_db_password | urlencode }}@{{ quay_db_hostname }}:{{ quay_db_port }}/{{ quay_db_dbname }}"
          DB_CONNECTION_ARGS: "{{ quay_db_connect_options }}"
    register: quay_config_rest_response
    failed_when: "quay_config_rest_response.status != 200 or quay_config_rest_response.json.config is not defined"

# Configure Database
- run_once: yes
  when: "inventory_hostname == ansible_play_hosts_all[0]"
  delegate_to: "{{ quay_setup_client }}"
  block:
  - name: Quay Setup API - Get Config State
    changed_when: false
    uri:
      method: GET
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/registrystatus"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
    register: quay_config_rest_response
  - name: Quay Setup API - Initialize DB
    when: "quay_config_rest_response.json.status == 'setup-db'"
    changed_when: true
    uri:
      method: GET
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/setupdb"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
    register: quay_config_rest_response
    failed_when: "quay_config_rest_response.status != 200 or quay_config_rest_response.json.logs is not defined"

# Configure Superuser
- run_once: yes
  when: "inventory_hostname == ansible_play_hosts_all[0]"
  delegate_to: "{{ quay_setup_client }}"
  block:
  - name: Quay Setup API - Get Config State
    uri:
      method: GET
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/registrystatus"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
    register: quay_config_rest_response
  - name: Quay Setup API - Initialize Super User
    when: "quay_config_rest_response.json.status == 'create-superuser'"
    changed_when: true
    uri:
      method: POST
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/config/createsuperuser"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
      body:
        username: "{{ quay_initial_superuser_username }}"
        email: "{{ quay_initial_superuser_email }}"
        password: "{{ quay_initial_superuser_password }}"
        repeatPassword: "{{ quay_initial_superuser_password }}"
    register: quay_config_rest_response
    failed_when: "quay_config_rest_response.status != 200 or quay_config_rest_response.json.status != true"

# Setup Clair Scanner Key
- name: Quay Setup Clair - Check for existing security_scanner keyfiles
  when: is_clair
  shell: "ls -1 {{ clair_storage_dir }}/clair/config/keys/|grep -E '\\.pem$'|sed -E 's~^.+/~~g'|cut -d '.' -f 1"
  register: clair_scanner_keyfiles_out
  changed_when: false
- name: Quay Setup Clair - Set clair_scanner_keyfiles Fact
  when: is_clair
  set_fact:
    clair_scanner_keys: "{{ clair_scanner_keyfiles_out.stdout_lines }}"
- run_once: yes
  delegate_to: "{{ quay_setup_client }}"
  block:
  - name: Quay Setup Clair - Prepare for Global existing security_scanner keyfiles
    delegate_facts: yes
    set_fact:
      global_clair_scanner_keys: "{{ (hostvars.values() | selectattr('clair_scanner_keys', 'defined') | list | first).clair_scanner_keys }}"
  - name: Quay Setup Clair - Check for Global existing security_scanner keyfiles
    delegate_facts: yes
    set_fact: 
      global_clair_scanner_keys: "{{ hostvars[quay_setup_client]['global_clair_scanner_keys'] | intersect(item['clair_scanner_keys']) }}"
    with_items: "{{ hostvars.values() | selectattr('clair_scanner_keys', 'defined') | list }}"
    loop_control:
      label: "{{ item['inventory_name'] }}"
  - name: Quay Setup API - Get Config State
    uri:
      method: GET
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/registrystatus"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
    register: quay_config_rest_response
    failed_when: "quay_config_rest_response.status != 200 or quay_config_rest_response.json.status != 'config'"
  - name: Quay Setup API - Get Clair Scanner Key Id
    uri:
      method: GET
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/keys"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
    register: quay_config_rest_response
  - name: Quay Setup API - Parse Clair Scanner Key Ids and Check for Matches with Existing
    when: "quay_config_rest_response.json['keys'] | length > 0"
    delegate_facts: yes
    set_fact:
      found_clair_scanner_key_ids: "{{ quay_config_rest_response.json['keys'] | map(attribute='kid') | list | intersect(hostvars[quay_setup_client]['global_clair_scanner_keys']) }}"
  - name: Quay Setup API - Grab First Matching Clair Scanner Key Id
    when: "hostvars[quay_setup_client]['found_clair_scanner_key_ids'] | default([]) | length > 0"
    delegate_facts: yes
    set_fact:
      quay_api_scanner_key_id: "{{ hostvars[quay_setup_client]['found_clair_scanner_key_ids'] | first }}"
  - name: Force new Clair Security Key
    when: "clair_force_new_key"
    delegate_facts: yes
    set_fact:
      quay_api_scanner_key_id: ''

- run_once: yes
  when: "(hostvars[quay_setup_client]['quay_api_scanner_key_id'] | default('')) == ''"
  delegate_to: "{{ quay_setup_client }}"
  block:
  - name: Quay Setup API - Create new Clair Scanner Key
    uri:
      method: POST
      url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/keys"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      body:
        name: "Service Key for Clair"
        service: "security_scanner"
        expiration: null
        notes: "Created by Ansible Playbook"
      validate_certs: no
    register: quay_config_rest_response
    changed_when: true
    failed_when: "quay_config_rest_response.status != 200 or quay_config_rest_response.json.private_key | default('') == ''"
  - name: Quay Setup - Parse Clair Scanner Key
    delegate_facts: yes
    set_fact:
      quay_api_scanner_key_id: "{{ quay_config_rest_response.json.kid }}"
      quay_api_scanner_key_data: "{{ quay_config_rest_response.json.private_key }}"

- name: Quay Setup - Set Clair Config Facts
  run_once: yes
  when: "inventory_hostname == ansible_play_hosts_all[0]"
  delegate_to: "{{ item }}"
  delegate_facts: yes
  set_fact:
    quay_api_scanner_key_id: "{{ hostvars[quay_setup_client]['quay_api_scanner_key_id'] }}"
    quay_api_scanner_key_data: "{{ hostvars[quay_setup_client]['quay_api_scanner_key_data'] | default('') }}"
  with_items: "{{ ansible_play_hosts_all }}"

# Get quay_api_config
- run_once: yes
  when: "inventory_hostname == ansible_play_hosts_all[0]"
  delegate_to: "{{ quay_setup_client }}"
  block:
  - name: Quay Setup API - Get Config
    uri:
      method: GET
      url: " https://{{ quay_setup_server }}:8443/api/v1/superuser/config"
      url_username: "quayconfig"
      url_password: "{{ quay_setup_password }}"
      force_basic_auth: yes
      force: yes
      return_content: yes
      body_format: json
      validate_certs: no
    register: quay_config_rest_response
  - name: Quay Setup API - Parse Config
    delegate_facts: yes
    set_fact:
      quay_api_config: "{{ quay_config_rest_response.json.config }}"
  - name: Get Quay Config from Role
    include_vars:
      file: files/quay/config.yaml
      name: quay_role_config

- when: is_quay
  block:
  - name: Quay Setup - Check For PreExisting Config File
    stat:
      path: "{{ quay_storage_dir }}/config/config.yaml"
    register: preexisting_config_file
  - name: Quay Setup - Get PreExisting Config File
    when: preexisting_config_file.stat.exists
    slurp:
      src: "{{ quay_storage_dir }}/config/config.yaml"
    register: preexisting_config_contents
  - name: Quay Setup - Parse PreExisting Config File
    when: preexisting_config_file.stat.exists
    set_fact:
      quay_preexisting_config_all: "{{ preexisting_config_contents.content | b64decode | from_yaml }}"
  - name: Quay Setup - Get Required Values from PreExisting Config File
    when: preexisting_config_file.stat.exists
    set_fact:
      quay_preexisting_config:
        SECRET_KEY: "{{ quay_preexisting_config_all['SECRET_KEY'] }}"
        BITTORRENT_FILENAME_PEPPER: "{{ quay_preexisting_config_all['BITTORRENT_FILENAME_PEPPER'] }}"
        DATABASE_SECRET_KEY: "{{ quay_preexisting_config_all['DATABASE_SECRET_KEY'] }}"

- run_once: yes
  delegate_to: "{{ quay_setup_client }}"
  when: "inventory_hostname == ansible_play_hosts_all[0]"
  block:
  - name: Quay setup - Get First server with preExisting Config
    delegate_facts: yes
    set_fact:
      quay_preexisting_servers: "{{ (hostvars.values() | selectattr('quay_preexisting_config', 'defined') | list )}}"
  - name: Quay Setup - Collect PreExisting Config from First Server
    delegate_facts: yes
    set_fact:
      quay_preexisting_config: "{{ (hostvars[quay_setup_client]['quay_preexisting_servers'] | first)['quay_preexisting_config'] if  (hostvars[quay_setup_client]['quay_preexisting_servers'] | length > 0)  else {} }}"

- name: Quay Setup - Merge Quay Configs
  when: "inventory_hostname == ansible_play_hosts_all[0]"
  run_once: yes
  set_fact:
    quay_config_merged: "{{ hostvars[quay_setup_client]['quay_api_config'] | combine(hostvars[quay_setup_client]['quay_preexisting_config']) | combine(quay_role_config) | combine(quay_config) }}"
  delegate_to: "{{ item }}"
  delegate_facts: yes
  with_items: "{{ ansible_play_hosts_all }}"    

# Validate data
- run_once: yes
  when: "inventory_hostname == ansible_play_hosts_all[0]"
  delegate_to: "{{ quay_setup_client }}"
  name: Quay Setup API - Validate Merged Config Settings
  tags:
  - validate
  uri:
    method: POST
    url: "https://{{ quay_setup_server }}:8443/api/v1/superuser/config/validate/{{ item }}"
    url_username: "quayconfig"
    url_password: "{{ quay_setup_password }}"
    force_basic_auth: yes
    force: yes
    return_content: yes
    body_format: json
    validate_certs: no
    body:
      config: "{{ quay_config_merged }}"
  with_items:
  - database
  - redis
  - registry-storage
  - time-machine
  - access

# Stop Config container
- run_once: yes
  when: "inventory_hostname == quay_setup_server"
  name: Quay Setup - Stop Config Container
  docker_container:
    name: quay-config
    state: stopped
